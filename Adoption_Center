#include <iostream>
#include <vector>
#include <memory>
#include <limits>
#include <fstream>
#include <sstream>
#include <algorithm>

// I didn't want to use 'using namespace std;' to keep it professional and avoid namespace issues

// Base class that represents any Animal
class Animal {
protected:
    std::string name;
    int age;
    std::string breed;
public:
    Animal(const std::string& name, int age, const std::string& breed)
        : name(name), age(age), breed(breed) {}

    virtual std::string getType() const = 0; // Every animal should return its type

    virtual std::string toString() const {
        return getType() + ": " + name + ", Age: " + std::to_string(age) + ", Breed: " + breed;
    }

    virtual std::string toFileString() const {
        return getType() + "," + name + "," + std::to_string(age) + "," + breed;
    }

    std::string getBreed() const { return breed; }
};

// Derived class for Dogs
class Dog : public Animal {
public:
    Dog(const std::string& name, int age, const std::string& breed)
        : Animal(name, age, breed) {}

    std::string getType() const override {
        return "Dog";
    }
};

// Derived class for Cats
class Cat : public Animal {
public:
    Cat(const std::string& name, int age, const std::string& breed)
        : Animal(name, age, breed) {}

    std::string getType() const override {
        return "Cat";
    }
};

// Vector to hold all the animals at the center
std::vector<std::shared_ptr<Animal>> animals;

// Helper function to safely get an integer input
int getValidatedInt(const std::string& prompt) {
    int value;
    std::cout << prompt;
    std::cin >> value;
    while (std::cin.fail()) {
        std::cin.clear(); // clear the error flag
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // discard bad input
        std::cout << "Invalid input. Please enter a number: ";
        std::cin >> value;
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // remove leftover input
    return value;
}

// Adds a new Dog or Cat to the center
void addAnimal() {
    std::string type;
    std::cout << "Enter animal type (Dog/Cat): ";
    std::getline(std::cin, type);

    // Make input lowercase for comparison
    std::transform(type.begin(), type.end(), type.begin(), ::tolower);

    if (type != "dog" && type != "cat") {
        std::cout << "Invalid type. Only 'Dog' or 'Cat' allowed.\n";
        return;
    }

    std::string name;
    std::cout << "Enter name: ";
    std::getline(std::cin, name);

    int age = getValidatedInt("Enter age: ");

    std::string breed;
    std::cout << "Enter breed: ";
    std::getline(std::cin, breed);

    // Create object based on user input and add to vector
    if (type == "dog")
        animals.push_back(std::make_shared<Dog>(name, age, breed));
    else
        animals.push_back(std::make_shared<Cat>(name, age, breed));

    std::cout << "Animal added successfully!\n";
}

// Lists all animals in the shelter
void listAnimals() {
    if (animals.empty()) {
        std::cout << "No animals available at the moment.\n";
        return;
    }

    std::cout << "\nAvailable Animals:\n";
    for (size_t i = 0; i < animals.size(); ++i) {
        std::cout << i + 1 << ". " << animals[i]->toString() << "\n";
    }
}

// Removes an animal from the list (adoption)
void adoptAnimal() {
    listAnimals();
    if (animals.empty()) return;

    int index = getValidatedInt("Enter the number of the animal to adopt: ");
    if (index < 1 || static_cast<size_t>(index) > animals.size()) {
        std::cout << "Invalid selection.\n";
        return;
    }

    animals.erase(animals.begin() + index - 1);
    std::cout << "Animal adopted successfully!\n";
}

// Searches for animals by breed
void searchByBreed() {
    std::string search;
    std::cout << "Enter breed to search: ";
    std::getline(std::cin, search);

    std::cout << "\nSearch Results:\n";
    bool found = false;
    for (const auto& animal : animals) {
        if (animal->getBreed() == search) {
            std::cout << animal->toString() << "\n";
            found = true;
        }
    }

    if (!found) {
        std::cout << "No animals of that breed found.\n";
    }
}

// Saves all current animals to a file for persistence
void saveToFile() {
    std::ofstream file("animals.txt");
    for (const auto& animal : animals) {
        file << animal->toFileString() << "\n";
    }
    file.close();
}

// Loads animals from file when program starts
void loadFromFile() {
    std::ifstream file("animals.txt");
    std::string line;

    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string type, name, ageStr, breed;

        std::getline(ss, type, ',');
        std::getline(ss, name, ',');
        std::getline(ss, ageStr, ',');
        std::getline(ss, breed);

        int age = std::stoi(ageStr);

        if (type == "Dog")
            animals.push_back(std::make_shared<Dog>(name, age, breed));
        else if (type == "Cat")
            animals.push_back(std::make_shared<Cat>(name, age, breed));
    }

    file.close();
}

// Main function that drives the whole program
int main() {
    loadFromFile(); // Load previously saved animals if any

    int choice;
    do {
        // Clear menu
        std::cout << "\n--- Pet Adoption Center ---\n";
        std::cout << "1. Add Animal\n";
        std::cout << "2. List Animals\n";
        std::cout << "3. Adopt Animal\n";
        std::cout << "4. Search by Breed\n";
        std::cout << "5. Exit\n";
        choice = getValidatedInt("Enter your choice: ");

        switch (choice) {
            case 1: addAnimal(); break;
            case 2: listAnimals(); break;
            case 3: adoptAnimal(); break;
            case 4: searchByBreed(); break;
            case 5:
                saveToFile(); // Save animals on exit
                std::cout << "Goodbye!\n";
                break;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 5);

    return 0;
}
